% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_bspline_coefs.R
\name{get_bspline_coefs}
\alias{get_bspline_coefs}
\title{Function to get fitted B-spline coefficients for smoothed functional covariates}
\usage{
get_bspline_coefs(
  func_data_list,
  time_points,
  break_spacing = "quantiles",
  n_breaks = 10,
  lambda_vals = 10^seq(-6, 6, length.out = 100),
  min_method = "mean",
  min_quantile = NULL,
  num_threads = parallel::detectCores(),
  manual_breaks = NULL
)
}
\arguments{
\item{func_data_list}{List of functional covariates. Each list element should be a dataframe with rows indicating time points and columns for each subject. Importantly, each element of the list of functional covariates must be named.}

\item{time_points}{Vector of observed time points. Method assumes all subjects and functional covariates are observed at a common set of time points.}

\item{break_spacing}{A value in c("quantiles", "equal", "manual") to set break spacing for B-spline basis.}

\item{n_breaks}{A number indicating number of breaks to use for B-spline basis (includes endpoints, results in n_breaks + 2 B-spline polynomials).}

\item{lambda_vals}{A vector of positive numbers to cross-validate over to get roughness penalty.}

\item{min_method}{A value to minimize during cross-validation, either "mean" or "quantile" (over the subjects GCV values)}

\item{min_quantile}{if min_method = "quantile", a value for quantile to use}

\item{num_threads}{Number of threads to smooth functional covariates similtaneously}

\item{manual_breaks}{An optional vector of manual break values.}
}
\value{
A list of four objects. Object (1) is a data frame of fitted B-spline coefficients for all subjects. Object (2) is a list of the fdSmooth objects. Object (3) is a vector of the optimal lambdas. Object (4) is a basis object of the type bspline.
}
\description{
Function to get fitted B-spline coefficients for smoothed functional covariates
}
\examples{

library(fds)
library(fda)
library(dplyr)

data("Fatspectrum")
data_list = list(fat = Fatspectrum$y) # list elements must be named
observed_wavelengths = Fatspectrum$x

fit_bspline = get_bspline_coefs(func_data_list = data_list, time_points = observed_wavelengths,
                                n_breaks = 10, lambda_vals = 10^seq(-6, 6, length.out = 250),
                                min_method = "mean", num_threads = 1)



}
